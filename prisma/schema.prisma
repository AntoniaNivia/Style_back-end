// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Enums
enum UserType {
  USER
  STORE
}

enum Gender {
  FEMALE
  MALE
  OTHER
}

enum MannequinPreference {
  Woman
  Man
  Neutral
}

enum GenerationStatus {
  PENDING
  GENERATING
  COMPLETED
  FAILED
}

// Models
model User {
  id                  String              @id @default(cuid())
  email               String              @unique
  name                String
  password            String
  type                UserType            @default(USER)
  gender              Gender              @default(OTHER)
  mannequinPreference MannequinPreference @default(Neutral)
  style               String?
  avatarUrl           String?
  bio                 String?             // üÜï Biografia do usu√°rio
  location            String?             // üÜï Localiza√ß√£o do usu√°rio
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt

  // Relations
  clothingItems ClothingItem[]
  savedOutfits  SavedOutfit[]
  feedPosts     FeedPost[]
  likedPosts    LikedPost[]
  savedPosts    SavedPost[] // ‚Üê Nova rela√ß√£o com posts salvos
  
  // üÜï Novas rela√ß√µes
  userOutfits          UserOutfit[]          // Outfits criados pelo usu√°rio
  likes                Like[]                // Likes dados pelo usu√°rio
  favorites            Favorite[]            // Favoritos do usu√°rio
  generatedOutfits     GeneratedOutfit[]     // üÜï Looks gerados pela IA
  manualOutfits        ManualOutfit[]        // üÜï Looks manuais criados pelo usu√°rio
  mannequinGenerations MannequinGeneration[] // üÜï Gera√ß√µes de manequim

  @@index([avatarUrl])
  @@map("users")
}

model ClothingItem {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  photoUrl  String
  type      String
  color     String
  season    String
  occasion  String
  tags      String[]
  createdAt DateTime @default(now())

  // Relations
  outfitItems OutfitItem[] // üÜï Rela√ß√£o com outfit items

  @@index([userId])
  @@map("clothing_items")
}

model FeedPost {
  id         String      @id @default(cuid())
  storeId    String
  store      User        @relation(fields: [storeId], references: [id], onDelete: Cascade)
  imageUrl   String
  caption    String
  likesCount Int         @default(0)  // ‚Üê Contador de likes adicionado
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt   // ‚Üê Campo updatedAt adicionado
  
  // Relations
  likes      LikedPost[]
  savedPosts SavedPost[] // ‚Üê Nova rela√ß√£o com posts salvos

  @@index([storeId])
  @@index([createdAt(sort: Desc)]) // ‚Üê Index para ordena√ß√£o por data
  @@map("feed_posts")
}

model LikedPost {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    String
  post      FeedPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, postId])
  @@index([userId])
  @@index([postId])
  @@map("liked_posts")
}

// üÜï Modelo para Posts Salvos (Favoritos)
model SavedPost {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    String
  post      FeedPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, postId])
  @@index([userId])
  @@index([postId])
  @@index([createdAt(sort: Desc)])
  @@map("saved_posts")
}

model SavedOutfit {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  imageUrl  String
  reasoning String
  itemsJson String
  createdAt DateTime @default(now())

  @@index([userId])
  @@map("saved_outfits")
}

// üÜï NOVOS MODELS PARA SISTEMA DE PERFIL DIN√ÇMICO

model UserOutfit {
  id            String        @id @default(cuid())
  userId        String
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  title         String
  imageUrl      String?
  tags          String[]      @default([])
  isAiGenerated Boolean       @default(false)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  outfitItems   OutfitItem[]  // Pe√ßas do outfit

  @@index([userId])
  @@index([createdAt(sort: Desc)])
  @@index([isAiGenerated])
  @@map("user_outfits")
}

model OutfitItem {
  id              String       @id @default(cuid())
  outfitId        String
  outfit          UserOutfit   @relation(fields: [outfitId], references: [id], onDelete: Cascade)
  clothingItemId  String
  clothingItem    ClothingItem @relation(fields: [clothingItemId], references: [id], onDelete: Cascade)
  reason          String?      // Motivo da escolha da pe√ßa
  createdAt       DateTime     @default(now())

  @@unique([outfitId, clothingItemId])
  @@index([outfitId])
  @@index([clothingItemId])
  @@map("outfit_items")
}

enum TargetType {
  OUTFIT
  POST
}

model Like {
  id         String     @id @default(cuid())
  userId     String
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  targetId   String     // ID do outfit ou post
  targetType TargetType
  createdAt  DateTime   @default(now())

  @@unique([userId, targetId, targetType])
  @@index([userId])
  @@index([targetId, targetType])
  @@index([createdAt(sort: Desc)])
  @@map("likes")
}

model Favorite {
  id         String     @id @default(cuid())
  userId     String
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  targetId   String
  targetType TargetType
  createdAt  DateTime   @default(now())

  @@unique([userId, targetId, targetType])
  @@index([userId])
  @@index([targetId, targetType])
  @@index([createdAt(sort: Desc)])
  @@map("favorites")
}

// üÜï MODEL PARA LOOKS GERADOS PELA IA
model GeneratedOutfit {
  id                   String   @id @default(cuid())
  userId               String
  selectedItemsJson    String   // JSON array dos itens selecionados
  reasoning            String   @db.Text
  styleNotes           String   @db.Text
  mannequinImageUrl    String?
  confidence           Float?
  inputPreferencesJson String   // JSON das prefer√™ncias de entrada (weather, occasion, style, mannequin)
  createdAt            DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([userId])
  @@index([createdAt(sort: Desc)])
  @@map("generated_outfits")
}

// üÜï MODEL PARA LOOKS MANUAIS CRIADOS PELO USU√ÅRIO
model ManualOutfit {
  id                   String   @id @default(cuid())
  userId               String
  name                 String?  // Nome opcional para o look
  selectedItemsJson    String   // JSON array dos itens selecionados manualmente
  notes                String?  @db.Text // Notas opcionais do usu√°rio
  tags                 String[] // Tags para categoriza√ß√£o
  isPrivate            Boolean  @default(false) // Se o look √© privado ou p√∫blico
  mannequinPreference  MannequinPreference @default(Neutral) // üÜï Prefer√™ncia de manequim
  mannequinImageUrl    String? // üÜï URL da imagem gerada do manequim
  previewId            String? @unique // üÜï ID √∫nico do preview gerado
  generationMetadata   String? @db.Text // üÜï Metadados da gera√ß√£o em JSON
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  mannequinGenerations MannequinGeneration[] // üÜï Gera√ß√µes de manequim

  // Indexes
  @@index([userId])
  @@index([createdAt(sort: Desc)])
  @@index([isPrivate])
  @@index([previewId])
  @@map("manual_outfits")
}

// üÜï MODEL PARA GERA√á√ïES DE IMAGENS DE MANEQUIM
model MannequinGeneration {
  id                String   @id @default(cuid())
  userId            String
  outfitId          String?
  previewId         String   @unique
  status            GenerationStatus @default(PENDING)
  imageUrl          String?
  generationPrompt  String   @db.Text
  aiService         String?  // midjourney, dalle, stable-diffusion
  generationTime    Int?     // tempo em segundos
  errorMessage      String?  @db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  outfit ManualOutfit? @relation(fields: [outfitId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([userId])
  @@index([previewId])
  @@index([status])
  @@index([createdAt(sort: Desc)])
  @@map("mannequin_generations")
}
